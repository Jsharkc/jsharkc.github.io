<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Golang on Jacobc&#39;s blog</title>
    <link>https://jsharkc.github.io/tags/golang/</link>
    <description>Recent content in Golang on Jacobc&#39;s blog</description>
    <image>
      <url>https://jsharkc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://jsharkc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 26 Sep 2021 19:05:03 +0800</lastBuildDate><atom:link href="https://jsharkc.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 按大小 or 时间切割日志</title>
      <link>https://jsharkc.github.io/post/golang-devide-log-by-size-or-time/</link>
      <pubDate>Sun, 26 Sep 2021 19:05:03 +0800</pubDate>
      
      <guid>https://jsharkc.github.io/post/golang-devide-log-by-size-or-time/</guid>
      <description>Log 用的 go.uber.org/zap 库。
按大小切割日志 按大小切割日志，用到 github.com/natefinch/lumberjack 库，代码如下：
package log import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/natefinch/lumberjack&amp;#34; &amp;#34;go.uber.org/zap&amp;#34; &amp;#34;go.uber.org/zap/zapcore&amp;#34; ) var Sugar *zap.SugaredLogger = nil var Raw *zap.Logger = nil // LogInit 初始化日志库 // dev 开发模式，日志不入文件 // logPath 日志文件存放路径 // logName 日志文件名称 // maxSize 单个文件大小，超过后切割，单位 M // maxBackups 旧的日志文件最多保留个数，0 为保存所有 // maxAge 旧的日志文件最多保留天数，0 为保存所有 // MaxBackups 和 maxAge 只要有一个不满足，就不再保留 func LogInit(dev bool, logPath, logName string, maxSize, maxBackups, maxAge int) (err error) { if dev { Raw, _ = zap.</description>
    </item>
    
    <item>
      <title>Mac 使用 V2ray 科学上网</title>
      <link>https://jsharkc.github.io/post/v2ray%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Sat, 07 Apr 2018 21:42:23 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/v2ray%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
      <description>Mac 使用 V2ray 科学上网 Install v2ray-core step 1: Add official tap
brew tap v2ray/v2ray step 2: Install v2ray-core:
brew install v2ray-core Update v2ray-core step 1: update tap
brew update step 2: update v2ray-core
brew upgrade v2ray-core 使用 直接在命令行上输入 v2ray 就可以运行 v2ray-core。（配置文件在当前目录则不用写参数，直接 v2ray）
默认配置文件位于：/usr/local/etc/config.json
编辑默认配置文件：
vim /usr/local/etc/config.json 配置文件也可以从 http://free-ss.tk/或者http://free-ss.tk/ 下载：
config.json 添加 http 代理：
&amp;#34;inboundDetour&amp;#34;: [{ &amp;#34;protocol&amp;#34;: &amp;#34;http&amp;#34;, &amp;#34;port&amp;#34;: 1081, &amp;#34;settings&amp;#34;: { &amp;#34;udp&amp;#34;: true } }], .zshrc 添加
# proxy alias proxy=&#39;export https_proxy=http://127.</description>
    </item>
    
    <item>
      <title>Cobra - 一个 Golang 命令行项目生成工具</title>
      <link>https://jsharkc.github.io/post/cobra%E5%85%A5%E9%97%A8%E5%B0%8F%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 17 Jul 2017 15:07:14 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/cobra%E5%85%A5%E9%97%A8%E5%B0%8F%E6%95%99%E7%A8%8B/</guid>
      <description>Cobra - Golang 命令行库 简介： Cobra 是一个创建 CLI 命令行的 golang 库。
组成： Cobra 结构由三部分组成：命令( Command )、参数( Args )、标志( Flag )。
type Command struct { Use string // The one-line usage message.  Short string // The short description shown in the &amp;#39;help&amp;#39; output.  Long string // The long message shown in the &amp;#39;help&amp;lt;this-command&amp;gt;&amp;#39; output.  Run func(cmd *Command, args []string) // Run runs the command. } 前三个是不同场景下的说明，最后一个是要执行的函数。
安装 安装 Cobra 很简单，首先，用 go get 安装最新版本的库，这个命令会安装 Cobra 框架生成工具和依赖。</description>
    </item>
    
    <item>
      <title>Golang slice 切片原理</title>
      <link>https://jsharkc.github.io/post/slice%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Mon, 10 Jul 2017 19:27:43 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/slice%E6%9C%BA%E5%88%B6/</guid>
      <description>Golang slice 切片原理 ​	golang 中的 slice 是比较好用的一种结构，能根据需求变长，相对于 array 的死板，slice 更加灵活也更加常用，有道说：知其然，知其所以然。现在，我们就看看 slice 到底是怎样一种结构。
slice源码 type slice struct { array unsafe.Pointer len int cap int } ​	根据平常使用情况，我们推测 len 是 slice 长度，cap 是 slice 的容量，而 array 则是指向底层数组的指针。
​	有同学可能不知道 unsafe.Pointer是什么，那么我们一并在这讲解一下。
package unsafe type ArbitraryType int //	- A pointer value of any type can be converted to a Pointer. //	- A Pointer can be converted to a pointer value of any type.</description>
    </item>
    
    <item>
      <title>Golang Interface 解析</title>
      <link>https://jsharkc.github.io/post/interface%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 17 Jun 2017 19:27:43 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/interface%E8%A7%A3%E6%9E%90/</guid>
      <description>Interface 解析 转自 https://zhuanlan.zhihu.com/p/27652856
先看一段代码：
func Foo(x interface{}) { if x == nil { fmt.Println(&amp;#34;empty interface&amp;#34;) return } fmt.Println(&amp;#34;non-empty interface&amp;#34;) } func main() { var x *int = nil Foo(x) } 上面的例子的输出结果如下
$ go run test_interface.go non-empty interface 可能你会感觉奇怪，为什么会是 non-empty inerface，那么继续往下看，你就会知道答案。
interface 底层结构 根据 interface 是否包含有 method，底层实现上用两种 struct 来表示：iface 和 eface。eface表示不含 method 的 interface 结构，或者叫 empty interface。对于 Golang 中的大部分数据类型都可以抽象出来 _type 结构，同时针对不同的类型还会有一些其他信息。
type eface struct { _type *_type data unsafe.Pointer } type _type struct { size uintptr // type size  ptrdata uintptr // size of memory prefix holding all pointers  hash uint32 // hash of type; avoids computation in hash tables  tflag tflag // extra type information flags  align uint8 // alignment of variable with this type  fieldalign uint8 // alignment of struct field with this type  kind uint8 // enumeration for C  alg *typeAlg // algorithm table  gcdata *byte // garbage collection data  str nameOff // string form  ptrToThis typeOff // type for pointer to this type, may be zero } iface 表示 non-empty interface 的底层实现。相比于 empty interface，non-empty 要包含一些 method。method 的具体实现存放在 itab.</description>
    </item>
    
    <item>
      <title>十条有用的 GO 技术</title>
      <link>https://jsharkc.github.io/post/%E5%8D%81%E6%9D%A1%E6%9C%89%E7%94%A8%E7%9A%84-go-%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Fri, 26 May 2017 09:42:23 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/%E5%8D%81%E6%9D%A1%E6%9C%89%E7%94%A8%E7%9A%84-go-%E6%8A%80%E6%9C%AF/</guid>
      <description>十条有用的 Go 技术 转自 mikespook.com
这里是我过去几年中编写的大量 Go 代码的经验总结而来的自己的最佳实践。我相信它们具有弹性的。这里的弹性是指： 某个应用需要适配一个灵活的环境。你不希望每过 3 到 4 个月就不得不将它们全部重构一遍。添加新的特性应当很容易。许多人参与开发该应用，它应当可以被理解，且维护简单。许多人使用该应用，bug 应该容易被发现并且可以快速的修复。我用了很长的时间学到了这些事情。其中的一些很微小，但对于许多事情都会有影响。所有这些都仅仅是建议，具体情况具体对待，并且如果有帮助的话务必告诉我。随时留言:)
1. 使用单一的 GOPATH 多个 GOPATH 的情况并不具有弹性。GOPATH 本身就是高度自我完备的（通过导入路径）。有多个 GOPATH 会导致某些副作用，例如可能使用了给定的库的不同的版本。你可能在某个地方升级了它，但是其他地方却没有升级。而且，我还没遇到过任何一个需要使用多个 GOPATH 的情况。所以只使用单一的 GOPATH，这会提升你 Go 的开发进度。
许多人不同意这一观点，接下来我会做一些澄清。像 etcd 或 camlistore 这样的大项目使用了像 godep 这样的工具，将所有依赖保存到某个目录中。也就是说，这些项目自身有一个单一的 GOPATH。它们只能在这个目录里找到对应的版本。除非你的项目很大并且极为重要，否则不要为每个项目使用不同的 GOPATH。如果你认为项目需要一个自己的 GOPATH 目录，那么就创建它，否则不要尝试使用多个 GOPATH。它只会拖慢你的进度。
2. 将 for-select 封装到函数中 如果在某个条件下，你需要从 for-select 中退出，就需要使用标签。例如：
func main() { L: for { select { case &amp;lt;-time.After(time.Second): fmt.Println(&amp;#34;hello&amp;#34;) default: break L } } fmt.Println(&amp;#34;ending&amp;#34;) } 如你所见，需要联合break使用标签。这有其用途，不过我不喜欢。这个例子中的 for 循环看起来很小，但是通常它们会更大，而判断break的条件也更为冗长。
如果需要退出循环，我会将 for-select 封装到函数中：</description>
    </item>
    
    <item>
      <title>Golang 中不存在引用传参</title>
      <link>https://jsharkc.github.io/post/golang%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%BC%95%E7%94%A8%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Wed, 03 May 2017 13:27:43 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/golang%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%BC%95%E7%94%A8%E4%BC%A0%E5%80%BC/</guid>
      <description>Golang 中不存在引用传参 ​	原文链接
​	翻译：Jsharkc
什么是引用变量 ? 在 C++ 语言中，你可以为已存在的变量声明一个别名，这就是引用变量：
#include &amp;lt;stdio.h&amp;gt; int main() { int a = 10; int &amp;amp;b = a; int &amp;amp;c = b; printf(&amp;#34;%p %p %p\n&amp;#34;, &amp;amp;a, &amp;amp;b, &amp;amp;c); // 0x7ffe114f0b14 0x7ffe114f0b14 0x7ffe114f0b14  return 0; } 可以看到，a、b、c 三个变量的地址是相同的，也就是说它们是同一个内存地址的变量，只不过有三个别名。就好比你有一个大名，一个小名，不管别人叫大名还是小名叫的都是你，如果改变 a 变量，b、c 变量也会跟着变。当你声明一个引用变量在不同的函数作用域中这是非常有用的。
Golang 没有引用变量 与 C++ 不同，在 Golang 中声明的每个变量都只能占用不同的内存空间的。
package main import &amp;#34;fmt&amp;#34; func main() { var a, b, c int fmt.Println(&amp;amp;a, &amp;amp;b, &amp;amp;c) // 0x1040a124 0x1040a128 0x1040a12c } 在 Golang 项目中不可能存在两个变量共享一块内存，但是可以创建两个变量指向相同的内存地址，但这和两个变量共享一块内存是不一样的。</description>
    </item>
    
    <item>
      <title>Go 程序的性能优化及 pprof 的使用</title>
      <link>https://jsharkc.github.io/post/go%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96pprof/</link>
      <pubDate>Sun, 12 Mar 2017 11:07:35 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96pprof/</guid>
      <description>Go 程序的性能优化及 pprof 的使用 转自snowInPluto
程序的性能优化无非就是对程序占用资源的优化。对于服务器而言，最重要的两项资源莫过于 CPU 和内存。性能优化，就是在对于不影响程序数据处理能力的情况下，我们通常要求程序的 CPU 的内存占用尽量低。反过来说，也就是当程序 CPU 和内存占用不变的情况下，尽量地提高程序的数据处理能力或者说是吞吐量。
Go 的原生工具链中提供了非常多丰富的工具供开发者使用，其中包括 pprof。
对于 pprof 的使用要分成下面两部分来说。
Web 程序使用 pprof 先写一个简单的 Web 服务程序。程序在 9876 端口上接收请求。
package main import ( &amp;quot;bytes&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;log&amp;quot; &amp;quot;math/rand&amp;quot; &amp;quot;net/http&amp;quot; _ &amp;quot;net/http/pprof&amp;quot; ) func main() { http.HandleFunc(&amp;quot;/test&amp;quot;, handler) log.Fatal(http.ListenAndServe(&amp;quot;:9876&amp;quot;, nil)) } func handler(w http.ResponseWriter, r *http.Request) { err := r.ParseForm() if nil != err { w.Write([]byte(err.Error())) return } doSomeThingOne(10000) buff := genSomeBytes() b, err := ioutil.</description>
    </item>
    
    <item>
      <title>Golang I/O 包的妙用</title>
      <link>https://jsharkc.github.io/post/golang_io%E5%8C%85_%E5%A6%99%E7%94%A8/</link>
      <pubDate>Wed, 14 Dec 2016 10:35:43 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/golang_io%E5%8C%85_%E5%A6%99%E7%94%A8/</guid>
      <description>Golang I/O 包的妙用 作者：icexin 转自简书
golang标准库对io的抽象非常精巧，各个组件可以随意组合，可以作为接口设计的典范。这篇文章结合一个实际的例子来和大家分享一下。
背景 以一个RPC的协议包来说，每个包有如下结构
type Packet struct { TotalSize uint32 Magic [4]byte Payload []byte Checksum uint32 } 其中TotalSize是整个包除去TotalSize后的字节数， Magic是一个固定长度的字串，Payload是包的实际内容，包含业务逻辑的数据。 Checksum是对Magic和Payload的adler32校验和。
编码(encode) 我们使用一个原型为func EncodePacket(w io.Writer, payload []byte) error的函数来把数据打包，结合encoding/binary我们很容易写出第一版，演示需要，错误处理方面就简化处理了。
var RPC_MAGIC = [4]byte{&amp;#39;p&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;x&amp;#39;, &amp;#39;i&amp;#39;} func EncodePacket(w io.Writer, payload []byte) error { // len(Magic) + len(Checksum) == 8  totalsize := uint32(len(payload) + 8) // write total size  binary.Write(w, binary.BigEndian, totalsize) // write magic bytes  binary.</description>
    </item>
    
    <item>
      <title>Go注意点总结</title>
      <link>https://jsharkc.github.io/post/gonote/</link>
      <pubDate>Tue, 15 Nov 2016 21:34:10 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/gonote/</guid>
      <description>Go &amp;gt;注意点&amp;lt; 总结 1. 布尔类型 ​ 布尔类型 不能 接受其他类型的赋值，不支持 自动或者强制的类型转换
var b bool b = 1 // 编译错误  b = bool(1) // 编译错误  2. int与int32 ​ **注意：**int和int32在Go语言里被认为是两种不同的类型，编译器也不会帮你自动做类型转换
var value2 int32 value1:= 64 // value1将会被自动推导为int类型  value2 = value1 // 编译错误  // 可用强制转换解决这个编译错误：  value2 = int32(value1) // 编译通过  3. 整数值比较 ​ 两种 不同 类型的整型数 不能 直接比较，比如 int8 类型的数和 int 类型的数不能直接比较，但各种类型的整型变量都可以直接与字面常量 ( literal ) 进行比较
 4. ^x 表示对 x 取反  5.</description>
    </item>
    
  </channel>
</rss>
