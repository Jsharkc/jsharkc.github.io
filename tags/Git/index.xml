<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Git on Jacobc&#39;s blog</title>
    <link>https://jsharkc.github.io/tags/git/</link>
    <description>Recent content in Git on Jacobc&#39;s blog</description>
    <image>
      <url>https://jsharkc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://jsharkc.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 28 Dec 2016 09:49:10 +0000</lastBuildDate><atom:link href="https://jsharkc.github.io/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git命令清单</title>
      <link>https://jsharkc.github.io/post/git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</link>
      <pubDate>Wed, 28 Dec 2016 09:49:10 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/git%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</guid>
      <description>Git专有名词解释：  Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库   一、新建代码库 # 在当前目录新建一个Git代码库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 下载一个项目和它的整个代码历史 $ git clone [url] 二、配置 Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）
# 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--golbal] # 设置提交代码时的用户信息 $ git config [--global] user.name &amp;quot;[name]&amp;quot; $ git config [--global] user.email &amp;quot;[email address]&amp;quot; 三、增加 / 删除文件 # 添加制定文件到暂存区 $ git add [file1] [file2] ... # 添加制定目录到暂存区，包括子目录 $ git add [dir] # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交 $ git add -p # 删除工作区文件，并且将这次删除放入暂存区 $ git rm [file1] [file2].</description>
    </item>
    
  </channel>
</rss>
