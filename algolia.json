[{"author":null,"categories":null,"content":null,"date":1667817240,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1667817240,"objectID":"87a27b31b45ddce87eb0a526c9673226","permalink":"https://jsharkc.github.io/post/centos-install-gitea/","publishdate":"2022-11-07T10:34:00Z","readingtime":7,"relpermalink":"/post/centos-install-gitea/","section":"post","summary":"CentOS 以 Docker 方式部署 Gitea 一、下载 Jenkins 镜像 Gitea 提供了标准的容器镜像（gitea/gitea），统一支持 SQLite、MySQL、PostgreSQL 和 SQL Server","tags":["Gitea"],"title":"CentOS 以 Docker 方式部署 Gitea","type":"post","url":"/post/centos-install-gitea/","weight":0,"wordcount":3078},{"author":null,"categories":null,"content":null,"date":1667406780,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1667406780,"objectID":"f208ee53e4e2262655f610ad83c9049a","permalink":"https://jsharkc.github.io/post/centos-install-jenkins/","publishdate":"2022-11-02T16:33:00Z","readingtime":2,"relpermalink":"/post/centos-install-jenkins/","section":"post","summary":"CentOS 以 Docker 方式部署 Jenkins 一、Docker 安装 Jenkins 1.1 下载 Jenkins 镜像 Jenkins 有两个产品线，一个是稳定版（Stable[LTS]），一个是新功能版（Regular[W","tags":["Jenkins"],"title":"CentOS 以 Docker 方式部署 Jenkins","type":"post","url":"/post/centos-install-jenkins/","weight":0,"wordcount":729},{"author":null,"categories":null,"content":"1. 通过 Docker 限制内存 2. 通过 MongoDB 配置文件限制内存","date":1648632563,"description":"1. 通过 Docker 限制内存 2. 通过 MongoDB 配置文件限制内存","dir":"post/","excerpt_html":"1. 通过 Docker 限制内存 2. 通过 MongoDB 配置文件限制内存","excerpt_text":"1. 通过 Docker 限制内存 2. 通过 MongoDB 配置文件限制内存","expirydate":-62135596800,"fuzzywordcount":800,"html":"1. 通过 Docker 限制内存 2. 通过 MongoDB 配置文件限制内存","keywords":null,"kind":"page","lang":"en","lastmod":1648632563,"objectID":"1a65b3f9ef206e3280666e063ea76bcb","permalink":"https://jsharkc.github.io/post/mongo-docker-deploy/","publishdate":"2022-04-02T17:29:23+80:00","readingtime":2,"relpermalink":"/post/mongo-docker-deploy/","section":"post","summary":"用 docker 起 mongo，有两种限制方式： 通过 Docker 限制内存 通过 MongoDB 自己的配置文件限制 一、通过 Docker 限制内存 内存限制相关参数： 参数 简介 -m, \u0026ndash;memory 内存限制，格式：数字","tags":["mongo"],"title":"限制内存 mongo docker-compsoe 部署","type":"post","url":"/post/mongo-docker-deploy/","weight":0,"wordcount":761},{"author":null,"categories":null,"content":null,"date":1647527378,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1647527378,"objectID":"c6b856e5a4b33c6e7ee64c8c90583b7b","permalink":"https://jsharkc.github.io/post/centos-install-oh-my-zsh/","publishdate":"2022-03-17T14:29:38Z","readingtime":2,"relpermalink":"/post/centos-install-oh-my-zsh/","section":"post","summary":"查看、安装 zsh 查看是否安装了 zsh # 方法一： chsh -l # 方法二： cat /etc/shells # 可能结果： /bin/sh /bin/bash /sbin/nologin /usr/bin/sh /usr/bin/bash /usr/sbin/nologin /bin/zsh # 如果有 /bin/zsh 代表已经安装，反之则没有 安装 zsh yum install -y zsh 切换 shell 为 zsh","tags":["Centos","oh-my-zsh"],"title":"Centos 安装 oh-my-zsh","type":"post","url":"/post/centos-install-oh-my-zsh/","weight":0,"wordcount":525},{"author":null,"categories":null,"content":null,"date":1639744856,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1639744856,"objectID":"d6e4b6b3d116b846c01a38715b21913c","permalink":"https://jsharkc.github.io/post/mac-install-charles/","publishdate":"2021-12-17T12:40:56Z","readingtime":1,"relpermalink":"/post/mac-install-charles/","section":"post","summary":"文章转自 https://www.jianshu.com/p/4f0573f3c5db 步骤 下载Charles安装包 双击dmg文件，将charles拖入应用程序中 在应用程序中右键 Charles，选择「显示包内容」，打开","tags":["Mac","软件","charles"],"title":"Mac安装破解版 Charles","type":"post","url":"/post/mac-install-charles/","weight":0,"wordcount":378},{"author":null,"categories":null,"content":"安装 k8s，记录下来，备忘","date":1636774943,"description":"安装 k8s，记录下来，备忘","dir":"post/","excerpt_html":"安装 k8s，记录下来，备忘","excerpt_text":"安装 k8s，记录下来，备忘","expirydate":-62135596800,"fuzzywordcount":3300,"html":"安装 k8s，记录下来，备忘","keywords":null,"kind":"page","lang":"en","lastmod":1636774943,"objectID":"cb6388722c6fc86740a606203685883b","permalink":"https://jsharkc.github.io/post/k8s-install-cluster/","publishdate":"2021-11-16T11:42:23+80:00","readingtime":7,"relpermalink":"/post/k8s-install-cluster/","section":"post","summary":"1. 环境初始化 1.1 安装并配置 Docker 1.1.1 安装 Docker 安装 Docker 参考 Docker安装 1.1.2 配置 cgroup driver 编辑 /etc/docker/daemon.json 文件，没有则创建，添加如下内容： { \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;] } 1.1.3 配置国内 registry { \u0026#34;exec-opts\u0026#34;: [\u0026#34;native.cgroupdriver=systemd\u0026#34;], \u0026#34;registry-mirrors\u0026#34;:[\u0026#34;https://hub-mirror.c.163.com\u0026#34;] } 1.1.4","tags":["k8s"],"title":"kubeadm 安装 k8s","type":"post","url":"/post/k8s-install-cluster/","weight":0,"wordcount":3246},{"author":null,"categories":null,"content":"一条命令安装，或者安装指定版本","date":1636710143,"description":"一条命令安装，或者安装指定版本","dir":"post/","excerpt_html":"一条命令安装，或者安装指定版本","excerpt_text":"一条命令安装，或者安装指定版本","expirydate":-62135596800,"fuzzywordcount":600,"html":"一条命令安装，或者安装指定版本","keywords":null,"kind":"page","lang":"en","lastmod":1636710143,"objectID":"6d75db02383c2eb0c7975039118a8dc0","permalink":"https://jsharkc.github.io/post/docker-install-centos7/","publishdate":"2021-11-15T17:42:23+80:00","readingtime":2,"relpermalink":"/post/docker-install-centos7/","section":"post","summary":"一条命令安装 官方脚本： curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 国内 daocloud 安装命令： curl -sSL https://get.daocloud.io/docker | sh 手动安装指定版本 卸载旧版本 sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine \\ container-selinux \\ docker-selinux 安装","tags":["Docker","Centos"],"title":"Centos7 安装 Docker","type":"post","url":"/post/docker-install-centos7/","weight":0,"wordcount":568},{"author":null,"categories":null,"content":"通过 otool 修复 dyld: Library not loaded 问题","date":1634366223,"description":"通过 otool 修复 dyld: Library not loaded 问题","dir":"post/","excerpt_html":"通过 otool 修复 dyld: Library not loaded 问题","excerpt_text":"通过 otool 修复 dyld: Library not loaded 问题","expirydate":-62135596800,"fuzzywordcount":300,"html":"通过 otool 修复 dyld: Library not loaded 问题","keywords":null,"kind":"page","lang":"en","lastmod":1634366223,"objectID":"5f31da759432efdc8f9f2abf0b8ed63c","permalink":"https://jsharkc.github.io/post/fix-dyld-library-not-loaded/","publishdate":"2021-10-16T14:37:03+08:00","readingtime":1,"relpermalink":"/post/fix-dyld-library-not-loaded/","section":"post","summary":"flutter 最新版 2.5.3 安装 CocoaPods 需要 ruby 2.6 以上，而我 MAC 上 ruby 只有 2.5 所以需要更新 ruby，brew install ruby 后，就碰到了这个问题。 报错信息： dyld: Library not loaded: /usr/local/opt/ruby/lib/libruby.2.5.dylib Referenced from: /usr/local/bin/vi Reason: image not found 也就","tags":["Mac"],"title":"修复 dyld: Library not loaded","type":"post","url":"/post/fix-dyld-library-not-loaded/","weight":0,"wordcount":235},{"author":null,"categories":["Golang"],"content":"zap 日志库，通过 lumberjack 按文件大小分割，通过 go-file-rotatelogs 按日期分割","date":1632654303,"description":"zap 日志库，通过 lumberjack 按文件大小分割，通过 go-file-rotatelogs 按日期分割","dir":"post/","excerpt_html":"zap 日志库，通过 lumberjack 按文件大小分割，通过 go-file-rotatelogs 按日期分割","excerpt_text":"zap 日志库，通过 lumberjack 按文件大小分割，通过 go-file-rotatelogs 按日期分割","expirydate":-62135596800,"fuzzywordcount":700,"html":"zap 日志库，通过 lumberjack 按文件大小分割，通过 go-file-rotatelogs 按日期分割","keywords":null,"kind":"page","lang":"en","lastmod":1632654303,"objectID":"f15730fd05914720b1745f367a4252a7","permalink":"https://jsharkc.github.io/post/golang-log-divide/","publishdate":"2021-09-26T19:05:03+08:00","readingtime":2,"relpermalink":"/post/golang-log-divide/","section":"post","summary":"Log 用的 go.uber.org/zap 库。 按大小切割日志 按大小切割日志，用到 github.com/natefinch/lumberjack 库，代码如下： package log import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/natefinch/lumberjack\u0026#34; \u0026#34;go.uber.org/zap\u0026#34; \u0026#34;go.uber.org/zap/zapcore\u0026#34; ) var Sugar *zap.SugaredLogger = nil var Raw *zap.Logger = nil // LogInit 初始化日志库 // dev 开发模式，日志","tags":["Golang"],"title":"Golang 按大小 or 时间切割日志","type":"post","url":"/post/golang-log-divide/","weight":0,"wordcount":625},{"author":null,"categories":null,"content":"iptables 学习使用","date":1630611743,"description":"iptables 学习使用","dir":"post/","excerpt_html":"iptables 学习使用","excerpt_text":"iptables 学习使用","expirydate":-62135596800,"fuzzywordcount":2800,"html":"iptables 学习使用","keywords":null,"kind":"page","lang":"en","lastmod":1630611743,"objectID":"be9acc86bd66604d3234e4fa784c7031","permalink":"https://jsharkc.github.io/post/linux-iptables/","publishdate":"2021-09-02T19:42:23Z","readingtime":6,"relpermalink":"/post/linux-iptables/","section":"post","summary":"Linux防火墙\u0026ndash;iptables学习 iptables是Linux系统提供的一个强大的防火墙工具，可以实现包过滤、包重定向、NA","tags":["linux"],"title":"Linux防火墙-iptables","type":"post","url":"/post/linux-iptables/","weight":0,"wordcount":2786},{"author":null,"categories":null,"content":"Android手机作为linux服务器简易教程","date":1626440340,"description":"Android手机作为linux服务器简易教程","dir":"post/","excerpt_html":"Android手机作为linux服务器简易教程","excerpt_text":"Android手机作为linux服务器简易教程","expirydate":-62135596800,"fuzzywordcount":900,"html":"Android手机作为linux服务器简易教程","keywords":null,"kind":"page","lang":"en","lastmod":1626440340,"objectID":"0daff520630c1feb96ed64fc3da4ee65","permalink":"https://jsharkc.github.io/post/android-phone-as-linux-server/","publishdate":"2021-07-16T12:59:00Z","readingtime":2,"relpermalink":"/post/android-phone-as-linux-server/","section":"post","summary":"有个闲置的「红米Note4」，想着是否能再利用一下，网上查了查，用 Termux 可以把 Android 手机当成 linux 服务器用，于是就有了接下来的部分了。 下载 Termux Termux 下载地址 下","tags":["Termux","ssh","Android","linux","服务器"],"title":"Android手机作为linux服务器","type":"post","url":"/post/android-phone-as-linux-server/","weight":0,"wordcount":807},{"author":null,"categories":null,"content":null,"date":1626198083,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1626198083,"objectID":"57f72778f40c44c316b9c4c5cb6fe8a6","permalink":"https://jsharkc.github.io/post/process-and-thread/","publishdate":"2021-07-13T17:41:23Z","readingtime":5,"relpermalink":"/post/process-and-thread/","section":"post","summary":"有进程为什么还创造线程 原因： 进程属于在CPU和系统资源等方面提供的抽象，能够有效提高CPU的利用率。 线程是在进程这个层次上提供的一层并发的抽","tags":["进程","线程"],"title":"有进程为什么还创造线程","type":"post","url":"/post/process-and-thread/","weight":0,"wordcount":2038},{"author":null,"categories":["Golang"],"content":"Go pprof 简单使用","date":1620472655,"description":"Go pprof 简单使用","dir":"post/","excerpt_html":"Go pprof 简单使用","excerpt_text":"Go pprof 简单使用","expirydate":-62135596800,"fuzzywordcount":1200,"html":"Go pprof 简单使用","keywords":null,"kind":"page","lang":"en","lastmod":1620472655,"objectID":"c2f2a07a300e81672b8a875cd6d65687","permalink":"https://jsharkc.github.io/post/go-pprof/","publishdate":"2021-05-08T11:17:35Z","readingtime":3,"relpermalink":"/post/go-pprof/","section":"post","summary":"Go 程序的性能优化及 pprof 的使用 转自snowInPluto 程序的性能优化无非就是对程序占用资源的优化。对于服务器而言，最重要的两项资源莫过于 CPU 和内","tags":["Golang"],"title":"Go 程序的性能优化及 pprof 的使用","type":"post","url":"/post/go-pprof/","weight":0,"wordcount":1185},{"author":null,"categories":null,"content":null,"date":1615831980,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1615831980,"objectID":"8ac7c1e07d1a1af639ec7317bb6f422a","permalink":"https://jsharkc.github.io/post/linux-file-descriptor/","publishdate":"2021-03-15T18:13:00Z","readingtime":2,"relpermalink":"/post/linux-file-descriptor/","section":"post","summary":"文件描述符（File descriptor）是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。 文件描述符在形式上是一个非负整","tags":["linux"],"title":"文件描述符 fd","type":"post","url":"/post/linux-file-descriptor/","weight":0,"wordcount":760},{"author":null,"categories":null,"content":null,"date":1607187144,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1607187144,"objectID":"254a8fadf2e9c04c343268761b8e0df2","permalink":"https://jsharkc.github.io/post/mongo-use-1/","publishdate":"2020-12-05T16:52:24Z","readingtime":3,"relpermalink":"/post/mongo-use-1/","section":"post","summary":"MongoDB 的正确打开方式 Part1 在关系型数据库中，处理关系时，总是会有一张关系表，不论关系的规模，但在 MongoDB 数据库中，需要考虑关系的规模，我们用一对多关系举例","tags":["mongo"],"title":"MongoDB 的正确打开方式 Part1","type":"post","url":"/post/mongo-use-1/","weight":0,"wordcount":1163},{"author":null,"categories":null,"content":null,"date":1605019832,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1605019832,"objectID":"e3eac684410ae684c4049323c7e49f9d","permalink":"https://jsharkc.github.io/post/mysql-update-%E7%BB%93%E5%90%88%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/","publishdate":"2020-11-10T14:50:32Z","readingtime":1,"relpermalink":"/post/mysql-update-%E7%BB%93%E5%90%88%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/","section":"post","summary":"有时 update 更新语句会需要根据另一个表进行更新，举例如下： -- 方式一： update tableA a, tableB b set a.Name=b.Name, a.Age=b.Age where a.IDCard=b.IDCard; -- 方式二: update tableA a inner join tableB b on a.IDCard=b.IDCard set a.Name=b.Name, a.Age=b.Age;","tags":["mysql"],"title":"Mysql update 结合另一个表更新数据","type":"post","url":"/post/mysql-update-%E7%BB%93%E5%90%88%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/","weight":0,"wordcount":58},{"author":null,"categories":null,"content":null,"date":1604007743,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1604007743,"objectID":"ef15c4c2b843cd04fd63d89dbf61a371","permalink":"https://jsharkc.github.io/post/flutter-%E8%BF%94%E5%9B%9E%E6%A1%8C%E9%9D%A2/","publishdate":"2020-10-29T21:42:23Z","readingtime":1,"relpermalink":"/post/flutter-%E8%BF%94%E5%9B%9E%E6%A1%8C%E9%9D%A2/","section":"post","summary":"Flutter 返回按钮返回桌面 想实现点击返回按钮，直接返回桌面，本想 flutter 有方法的话，直接用，然而好像没有，所以采用调用本地方法返回桌面 Android 端 MainActivity 代码如下 package com.dreamreal.example; import","tags":["Flutter"],"title":"Flutter 返回按钮返回桌面","type":"post","url":"/post/flutter-%E8%BF%94%E5%9B%9E%E6%A1%8C%E9%9D%A2/","weight":0,"wordcount":325},{"author":null,"categories":null,"content":"接口幂等性设计的 N 种方式","date":1600976543,"description":"接口幂等性设计的 N 种方式","dir":"post/","excerpt_html":"接口幂等性设计的 N 种方式","excerpt_text":"接口幂等性设计的 N 种方式","expirydate":-62135596800,"fuzzywordcount":2600,"html":"接口幂等性设计的 N 种方式","keywords":null,"kind":"page","lang":"en","lastmod":1600976543,"objectID":"99bff3978625c34f6d97a91aec1538bb","permalink":"https://jsharkc.github.io/post/api-idempotent/","publishdate":"2020-09-24T19:42:23Z","readingtime":6,"relpermalink":"/post/api-idempotent/","section":"post","summary":"一、什么是幂等 幂等是一个数学与计算机科学概念。 在数学中，幂等用函数表达式就是：f(x) = f(f(x))。比如求绝对值的函数，就是幂等的，ab","tags":["后端"],"title":"接口幂等性设计","type":"post","url":"/post/api-idempotent/","weight":0,"wordcount":2560},{"author":null,"categories":null,"content":"事务特征、隔离级别以及间隙锁","date":1597843966,"description":"事务特征、隔离级别以及间隙锁","dir":"post/","excerpt_html":"事务特征、隔离级别以及间隙锁","excerpt_text":"事务特征、隔离级别以及间隙锁","expirydate":-62135596800,"fuzzywordcount":3500,"html":"事务特征、隔离级别以及间隙锁","keywords":null,"kind":"page","lang":"en","lastmod":1597843966,"objectID":"1a45bed9e1a33487efa42c879db4f458","permalink":"https://jsharkc.github.io/post/mysql-isolation/","publishdate":"2020-08-19T21:32:46+08:00","readingtime":7,"relpermalink":"/post/mysql-isolation/","section":"post","summary":"一、事务的四个特征（ACID） 事务具有四个特征：原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持续性（ Durability ）。这四个特性简称为 ACID 特性。 1. 原子性 (Atomicity) 事","tags":["mysql"],"title":"MySQL 四种隔离级别 \u0026 间隙锁","type":"post","url":"/post/mysql-isolation/","weight":0,"wordcount":3467},{"author":null,"categories":["Golang"],"content":"Cobra 简要教程","date":1589728034,"description":"Cobra 简要教程","dir":"post/","excerpt_html":"Cobra 简要教程","excerpt_text":"Cobra 简要教程","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Cobra 简要教程","keywords":null,"kind":"page","lang":"en","lastmod":1589728034,"objectID":"2e710e9bf46ac26e268016769fd2a23f","permalink":"https://jsharkc.github.io/post/go-cobra/","publishdate":"2020-05-17T15:07:14Z","readingtime":3,"relpermalink":"/post/go-cobra/","section":"post","summary":"Cobra - Golang 命令行库 简介： Cobra 是一个创建 CLI 命令行的 golang 库。 组成： Cobra 结构由三部分组成：命令( Command )、参数( Args )、标志( Flag )。 type Command struct { Use string // The one-line usage message. Short string // The","tags":["Golang","cobra"],"title":"Cobra - 一个 Golang 命令行项目生成工具","type":"post","url":"/post/go-cobra/","weight":0,"wordcount":1226},{"author":null,"categories":["Golang"],"content":null,"date":1586204863,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2500,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1586204863,"objectID":"0768b23cc1fa97f323ca70a5723dad5f","permalink":"https://jsharkc.github.io/post/go-interface/","publishdate":"2020-04-06T20:27:43Z","readingtime":5,"relpermalink":"/post/go-interface/","section":"post","summary":"Interface 解析 原文链接 先看一段代码： func Foo(x interface{}) { if x == nil { fmt.Println(\u0026#34;empty interface\u0026#34;) return } fmt.Println(\u0026#34;non-empty interface\u0026#34;) } func main() { var x *int = nil Foo(x) } 上面的例子的输出结果如下 $ go run test_interface.go non-empty interface 可能你会感觉奇怪，为什么","tags":["Golang"],"title":"Golang Interface 解析","type":"post","url":"/post/go-interface/","weight":0,"wordcount":2400},{"author":null,"categories":["Golang"],"content":"Golang slice 切片原理解析","date":1583868463,"description":"Golang slice 切片原理解析","dir":"post/","excerpt_html":"Golang slice 切片原理解析","excerpt_text":"Golang slice 切片原理解析","expirydate":-62135596800,"fuzzywordcount":1600,"html":"Golang slice 切片原理解析","keywords":null,"kind":"page","lang":"en","lastmod":1583868463,"objectID":"c4e49aed17b3a99e211145504ec52a6e","permalink":"https://jsharkc.github.io/post/go-slice/","publishdate":"2020-03-10T19:27:43Z","readingtime":4,"relpermalink":"/post/go-slice/","section":"post","summary":"Golang slice 切片原理 ​ golang 中的 slice 是比较好用的一种结构，能根据需求变长，相对于 array 的死板，slice 更加灵活也更加常用，有道说：知其然，知其所以然。现在，","tags":["Golang"],"title":"Golang slice 切片原理","type":"post","url":"/post/go-slice/","weight":0,"wordcount":1537},{"author":null,"categories":["Golang"],"content":"Jobrunner 定时任务库源码解析","date":1580123255,"description":"Jobrunner 定时任务库源码解析","dir":"post/","excerpt_html":"Jobrunner 定时任务库源码解析","excerpt_text":"Jobrunner 定时任务库源码解析","expirydate":-62135596800,"fuzzywordcount":1600,"html":"Jobrunner 定时任务库源码解析","keywords":null,"kind":"page","lang":"en","lastmod":1580123255,"objectID":"f3ce0986c4ec4f167aa3efe98bb51f6d","permalink":"https://jsharkc.github.io/post/jobrunner/","publishdate":"2020-01-27T11:07:35Z","readingtime":4,"relpermalink":"/post/jobrunner/","section":"post","summary":"s 安装 go get github.com/bamzi/jobrunner 使用 eg1 package main import \u0026#34;github.com/bamzi/jobrunner\u0026#34; func main() { jobrunner.Start() jobrunner.Schedule(\u0026#34;@every 5s\u0026#34;, ReminderEmails{}) select{} } type ReminderEmails struct {} func (e ReminderEmails) Run() { fmt.Printf(\u0026#34;Every 5 sec send reminder emails \\n\u0026#34;) } ***解析：***在 main() 函数中，jobrunner 是导入的包, jobrunner.Start()","tags":["Golang"],"title":"Jobrunner 源码解析","type":"post","url":"/post/jobrunner/","weight":0,"wordcount":1505},{"author":null,"categories":["Golang"],"content":null,"date":1576319743,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":2100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1576319743,"objectID":"a9993a5cb0d71a9f7b197b79a08a6e3a","permalink":"https://jsharkc.github.io/post/go-io/","publishdate":"2019-12-14T10:35:43Z","readingtime":4,"relpermalink":"/post/go-io/","section":"post","summary":"Golang I/O 包的妙用 golang标准库对io的抽象非常精巧，各个组件可以随意组合，可以作为接口设计的典范。这篇文章结合一个实际的例子来和大家分享一下","tags":["Golang"],"title":"Golang I/O 包的妙用","type":"post","url":"/post/go-io/","weight":0,"wordcount":2002},{"author":null,"categories":["Golang"],"content":null,"date":1575126420,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":4100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1575126420,"objectID":"83c245f2d9db46cab6dd23570cbd9bc4","permalink":"https://jsharkc.github.io/post/cors/","publishdate":"2019-11-30T15:07:00Z","readingtime":8,"relpermalink":"/post/cors/","section":"post","summary":"\u003ch1 id=\"跨域资源共享-cors-详解\"\u003e跨域资源共享 CORS 详解\u003c/h1\u003e\n\u003cp\u003eCORS是一个W3C标准，全称是\u0026quot;跨域资源共享\u0026quot;（Cross-origin resource sharing）。\n它允许浏览器向跨源服务器，发出\u003ccode\u003eXMLHttpRequest\u003c/code\u003e请求，从而克服了AJAX只能\u003cstrong\u003e同源\u003c/strong\u003e使用的限制。\n本文详细介绍CORS的内部机制。\u003c/p\u003e","tags":["Golang"],"title":"跨域资源共享 CORS 详解","type":"post","url":"/post/cors/","weight":0,"wordcount":4002},{"author":null,"categories":["Golang"],"content":null,"date":1573853650,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1573853650,"objectID":"12a43a1a0388b4675f0642d12ef5e206","permalink":"https://jsharkc.github.io/post/go-note/","publishdate":"2019-11-15T21:34:10Z","readingtime":8,"relpermalink":"/post/go-note/","section":"post","summary":"Go \u0026gt;注意点\u0026lt; 总结 1. 布尔类型 ​ 布尔类型 不能 接受其他类型的赋值，不支持 自动或者强制的类型转换 var b bool b = 1 // 编译错误 b = bool(1) // 编译错误 2.","tags":["Golang"],"title":"Go注意点总结","type":"post","url":"/post/go-note/","weight":0,"wordcount":3510},{"author":null,"categories":null,"content":null,"date":1570899144,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":3100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1570899144,"objectID":"40e4f01814b9dc176d8366a91be4ecd8","permalink":"https://jsharkc.github.io/post/docker-note/","publishdate":"2019-10-12T16:52:24Z","readingtime":7,"relpermalink":"/post/docker-note/","section":"post","summary":"Docker Note 镜像 虚悬镜像 ​ 没有仓库名，也没有标签，均为\u0026lt;none\u0026gt;的为虚悬镜像： \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; 00285df0df87 5 days ago 342 MB ​ 由于新旧镜像同名，旧镜像名称被取消，从","tags":["Docker"],"title":"Docker Note","type":"post","url":"/post/docker-note/","weight":0,"wordcount":3054},{"author":null,"categories":["Golang"],"content":null,"date":1568381263,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1568381263,"objectID":"99c3efc8a4a9beef287e164b5650ed66","permalink":"https://jsharkc.github.io/post/go-no-ref-param/","publishdate":"2019-09-13T13:27:43Z","readingtime":2,"relpermalink":"/post/go-no-ref-param/","section":"post","summary":"Golang 中不存在引用传参 ​原文链接 翻译：Jsharkc 什么是引用变量 ? 在 C++ 语言中，你可以为已存在的变量声明一个别名，这就是引用变量： #include \u0026lt;stdio.h\u0026gt; int main() { int a","tags":["Golang"],"title":"Golang 中不存在引用传参","type":"post","url":"/post/go-no-ref-param/","weight":0,"wordcount":539},{"author":null,"categories":null,"content":"Git命令清单","date":1567032550,"description":"Git命令清单","dir":"post/","excerpt_html":"Git命令清单","excerpt_text":"Git命令清单","expirydate":-62135596800,"fuzzywordcount":500,"html":"Git命令清单","keywords":null,"kind":"page","lang":"en","lastmod":1567032550,"objectID":"2c5e9e00cc3327db431b670a19fafec7","permalink":"https://jsharkc.github.io/post/git-command/","publishdate":"2019-08-28T22:49:10Z","readingtime":1,"relpermalink":"/post/git-command/","section":"post","summary":"Git专有名词解释： Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 一、新建","tags":["git"],"title":"Git命令清单","type":"post","url":"/post/git-command/","weight":0,"wordcount":494},{"author":null,"categories":null,"content":"Docker 搭建 Cockroachdb 集群环境","date":1566053437,"description":"Docker 搭建 Cockroachdb 集群环境","dir":"post/","excerpt_html":"Docker 搭建 Cockroachdb 集群环境","excerpt_text":"Docker 搭建 Cockroachdb 集群环境","expirydate":-62135596800,"fuzzywordcount":1700,"html":"Docker 搭建 Cockroachdb 集群环境","keywords":null,"kind":"page","lang":"en","lastmod":1566053437,"objectID":"c947ca6f9fe88a7508cc7ede7d21f0d3","permalink":"https://jsharkc.github.io/post/cockroachdb/","publishdate":"2019-08-17T14:50:37Z","readingtime":4,"relpermalink":"/post/cockroachdb/","section":"post","summary":"初探 Cockroachdb 1.创建网桥 由于在单个主机上运行多个 Docker 容器，因此每个容器有一个 CockroachDB 节点，需要创建Docker所指的桥接网络。桥接网络将使容器能够作为单个","tags":["cockroach"],"title":"初探 Cockroachdb","type":"post","url":"/post/cockroachdb/","weight":0,"wordcount":1629},{"author":null,"categories":["Golang"],"content":"十个 golang 小技巧","date":1564436543,"description":"十个 golang 小技巧","dir":"post/","excerpt_html":"十个 golang 小技巧","excerpt_text":"十个 golang 小技巧","expirydate":-62135596800,"fuzzywordcount":4200,"html":"十个 golang 小技巧","keywords":null,"kind":"page","lang":"en","lastmod":1564436543,"objectID":"be56cd6d2fb1331b565b32a90735fbcb","permalink":"https://jsharkc.github.io/post/go-tips-ten-useful/","publishdate":"2019-07-29T21:42:23Z","readingtime":9,"relpermalink":"/post/go-tips-ten-useful/","section":"post","summary":"十条有用的 Go 技巧 转自 mikespook.com 这里是我过去几年中编写的大量 Go 代码的经验总结而来的自己的最佳实践。我相信它们具有弹性的。这里的弹性是指： 某个应用需要适","tags":["Golang"],"title":"十条有用的 GO 小技巧","type":"post","url":"/post/go-tips-ten-useful/","weight":0,"wordcount":4140},{"author":null,"categories":["Golang"],"content":null,"date":1554673343,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1554673343,"objectID":"3c29d583585b26518e4e8c466a5c203d","permalink":"https://jsharkc.github.io/post/v2ray%E4%BD%BF%E7%94%A8/","publishdate":"2019-04-07T21:42:23Z","readingtime":1,"relpermalink":"/post/v2ray%E4%BD%BF%E7%94%A8/","section":"post","summary":"Install v2ray-core step 1: Add official tap brew tap v2ray/v2ray step 2: Install v2ray-core: brew install v2ray-core Update v2ray-core step 1: update tap brew update step 2: update v2ray-core brew upgrade v2ray-core 使用 直接在命令行上输入 v2ray 就可以运行 v2ray-core。（配置文件在当前目录","tags":["Golang"],"title":"Mac 使用 V2ray","type":"post","url":"/post/v2ray%E4%BD%BF%E7%94%A8/","weight":0,"wordcount":236},{"author":null,"categories":null,"content":null,"date":1549186943,"description":"","dir":"post/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":400,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":1549186943,"objectID":"70c53691af897b65b238314c35b5ebbf","permalink":"https://jsharkc.github.io/post/react-less-and-antd/","publishdate":"2019-02-03T17:42:23+08:00","readingtime":1,"relpermalink":"/post/react-less-and-antd/","section":"post","summary":"create-react-app 脚手架添加 less 支持和 antd 样式按需加载 1. 创建项目 npm install -g create-react-app /* 安装create-react-app，建议使用cnpm */ create-react-app react-test /* 使用命令创建应用，mya","tags":["React"],"title":"create-react-app 脚手架添加 less 支持和 antd 样式按需加载","type":"post","url":"/post/react-less-and-antd/","weight":0,"wordcount":377},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"54ccacff97b96806d49760361ef17350","permalink":"https://jsharkc.github.io/top/books/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/top/books/","section":"top","summary":"Machine learning学习笔记 Coursera 在线课程 Machine learning 笔记 讲师: 吴恩达(Andrew Ng) 课程地址：https://www.coursera.org/lear","tags":null,"title":"","type":"top","url":"/top/books/","weight":0,"wordcount":88},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"7a0da914bde98a7d3fcc7f6c5886633c","permalink":"https://jsharkc.github.io/top/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/top/about/","section":"top","summary":"TEST HUGO BLOG","tags":null,"title":"About","type":"top","url":"/top/about/","weight":0,"wordcount":3},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"32fc005f9fafae99218aec4dbd5ab922","permalink":"https://jsharkc.github.io/archives/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archives/","section":"","summary":"archives","tags":null,"title":"Archive","type":"page","url":"/archives/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"top/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a2d508875b727c5ce2efe3a88025f113","permalink":"https://jsharkc.github.io/top/archives/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/top/archives/","section":"top","summary":"archive","tags":null,"title":"Archive","type":"post","url":"/top/archives/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"4953bf99d7018c161b1b361cb25f1331","permalink":"https://jsharkc.github.io/search/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/","section":"","summary":"search","tags":null,"title":"Search","type":"page","url":"/search/","weight":0,"wordcount":0},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"search/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8946788897930c0c0c39fbfcd30ff2e4","permalink":"https://jsharkc.github.io/search/placeholder/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/search/placeholder/","section":"search","summary":"search","tags":null,"title":"Search","type":"search","url":"/search/placeholder/","weight":0,"wordcount":0}]