<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Jacobc&#39; Blog</title>
    <link>https://jsharkc.github.io/categories/golang/</link>
    <description>Recent content in Golang on Jacobc&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 26 Sep 2021 19:05:03 +0800</lastBuildDate><atom:link href="https://jsharkc.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 按大小 or 时间切割日志</title>
      <link>https://jsharkc.github.io/post/golang-log-divide/</link>
      <pubDate>Sun, 26 Sep 2021 19:05:03 +0800</pubDate>
      
      <guid>https://jsharkc.github.io/post/golang-log-divide/</guid>
      <description>Log 用的 go.uber.org/zap 库。 按大小切割日志 按大小切割日志，用到 github.com/natefinch/lumberjack 库，代码如下： package log import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;time&amp;#34; &amp;#34;github.com/natefinch/lumberjack&amp;#34; &amp;#34;go.uber.org/zap&amp;#34; &amp;#34;go.uber.org/zap/zapcore&amp;#34; ) var Sugar *zap.SugaredLogger = nil var Raw *zap.Logger = nil // LogInit 初始化日志库 // dev 开发模式，日志</description>
    </item>
    
    <item>
      <title>Go 程序的性能优化及 pprof 的使用</title>
      <link>https://jsharkc.github.io/post/go-pprof/</link>
      <pubDate>Sat, 08 May 2021 11:17:35 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go-pprof/</guid>
      <description>Go 程序的性能优化及 pprof 的使用 转自snowInPluto 程序的性能优化无非就是对程序占用资源的优化。对于服务器而言，最重要的两项资源莫过于 CPU 和内</description>
    </item>
    
    <item>
      <title>Cobra - 一个 Golang 命令行项目生成工具</title>
      <link>https://jsharkc.github.io/post/go-cobra/</link>
      <pubDate>Sun, 17 May 2020 15:07:14 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go-cobra/</guid>
      <description>Cobra - Golang 命令行库 简介： Cobra 是一个创建 CLI 命令行的 golang 库。 组成： Cobra 结构由三部分组成：命令( Command )、参数( Args )、标志( Flag )。 type Command struct { Use string // The one-line usage message. Short string // The</description>
    </item>
    
    <item>
      <title>Golang Interface 解析</title>
      <link>https://jsharkc.github.io/post/go-interface/</link>
      <pubDate>Mon, 06 Apr 2020 20:27:43 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go-interface/</guid>
      <description>Interface 解析 原文链接 先看一段代码： func Foo(x interface{}) { if x == nil { fmt.Println(&amp;#34;empty interface&amp;#34;) return } fmt.Println(&amp;#34;non-empty interface&amp;#34;) } func main() { var x *int = nil Foo(x) } 上面的例子的输出结果如下 $ go run test_interface.go non-empty interface 可能你会感觉奇怪，为什么</description>
    </item>
    
    <item>
      <title>Golang slice 切片原理</title>
      <link>https://jsharkc.github.io/post/go-slice/</link>
      <pubDate>Tue, 10 Mar 2020 19:27:43 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go-slice/</guid>
      <description>Golang slice 切片原理 ​ golang 中的 slice 是比较好用的一种结构，能根据需求变长，相对于 array 的死板，slice 更加灵活也更加常用，有道说：知其然，知其所以然。现在，</description>
    </item>
    
    <item>
      <title>Jobrunner 源码解析</title>
      <link>https://jsharkc.github.io/post/jobrunner/</link>
      <pubDate>Mon, 27 Jan 2020 11:07:35 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/jobrunner/</guid>
      <description>s 安装 go get github.com/bamzi/jobrunner 使用 eg1 package main import &amp;#34;github.com/bamzi/jobrunner&amp;#34; func main() { jobrunner.Start() jobrunner.Schedule(&amp;#34;@every 5s&amp;#34;, ReminderEmails{}) select{} } type ReminderEmails struct {} func (e ReminderEmails) Run() { fmt.Printf(&amp;#34;Every 5 sec send reminder emails \n&amp;#34;) } ***解析：***在 main() 函数中，jobrunner 是导入的包, jobrunner.Start()</description>
    </item>
    
    <item>
      <title>Golang I/O 包的妙用</title>
      <link>https://jsharkc.github.io/post/go-io/</link>
      <pubDate>Sat, 14 Dec 2019 10:35:43 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go-io/</guid>
      <description>Golang I/O 包的妙用 golang标准库对io的抽象非常精巧，各个组件可以随意组合，可以作为接口设计的典范。这篇文章结合一个实际的例子来和大家分享一下</description>
    </item>
    
    <item>
      <title>跨域资源共享 CORS 详解</title>
      <link>https://jsharkc.github.io/post/cors/</link>
      <pubDate>Sat, 30 Nov 2019 15:07:00 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/cors/</guid>
      <description>&lt;h1 id=&#34;跨域资源共享-cors-详解&#34;&gt;跨域资源共享 CORS 详解&lt;/h1&gt;
&lt;p&gt;CORS是一个W3C标准，全称是&amp;quot;跨域资源共享&amp;quot;（Cross-origin resource sharing）。
它允许浏览器向跨源服务器，发出&lt;code&gt;XMLHttpRequest&lt;/code&gt;请求，从而克服了AJAX只能&lt;strong&gt;同源&lt;/strong&gt;使用的限制。
本文详细介绍CORS的内部机制。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go注意点总结</title>
      <link>https://jsharkc.github.io/post/go-note/</link>
      <pubDate>Fri, 15 Nov 2019 21:34:10 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go-note/</guid>
      <description>Go &amp;gt;注意点&amp;lt; 总结 1. 布尔类型 ​ 布尔类型 不能 接受其他类型的赋值，不支持 自动或者强制的类型转换 var b bool b = 1 // 编译错误 b = bool(1) // 编译错误 2.</description>
    </item>
    
    <item>
      <title>Golang 中不存在引用传参</title>
      <link>https://jsharkc.github.io/post/go-no-ref-param/</link>
      <pubDate>Fri, 13 Sep 2019 13:27:43 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go-no-ref-param/</guid>
      <description>Golang 中不存在引用传参 ​原文链接 翻译：Jsharkc 什么是引用变量 ? 在 C++ 语言中，你可以为已存在的变量声明一个别名，这就是引用变量： #include &amp;lt;stdio.h&amp;gt; int main() { int a</description>
    </item>
    
    <item>
      <title>十条有用的 GO 小技巧</title>
      <link>https://jsharkc.github.io/post/go-tips-ten-useful/</link>
      <pubDate>Mon, 29 Jul 2019 21:42:23 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/go-tips-ten-useful/</guid>
      <description>十条有用的 Go 技巧 转自 mikespook.com 这里是我过去几年中编写的大量 Go 代码的经验总结而来的自己的最佳实践。我相信它们具有弹性的。这里的弹性是指： 某个应用需要适</description>
    </item>
    
    <item>
      <title>Mac 使用 V2ray</title>
      <link>https://jsharkc.github.io/post/v2ray%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 07 Apr 2019 21:42:23 +0000</pubDate>
      
      <guid>https://jsharkc.github.io/post/v2ray%E4%BD%BF%E7%94%A8/</guid>
      <description>Install v2ray-core step 1: Add official tap brew tap v2ray/v2ray step 2: Install v2ray-core: brew install v2ray-core Update v2ray-core step 1: update tap brew update step 2: update v2ray-core brew upgrade v2ray-core 使用 直接在命令行上输入 v2ray 就可以运行 v2ray-core。（配置文件在当前目录</description>
    </item>
    
  </channel>
</rss>
